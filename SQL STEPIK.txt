V2/commit
CREATE TABLE book(
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8, 2),
    amount INT
);
----------------------------
INSERT INTO book (title, author, price, amount) VALUES ('Мастер и Маргарита', 'Булгаков М.А.', 670.99,  3);
SELECT * FROM book;
-------------------------
INSERT INTO book (title, author, price, amount) VALUES ('Белая гвардия', 'Булгаков М.А.', 540.50, 5);
INSERT INTO book (title, author, price, amount) VALUES ('Идиот', 'Достоевский Ф.М.', 460.00, 10);
INSERT INTO book (title, author, price, amount) VALUES ('Братья Карамазовы', 'Достоевский Ф.М.', 799.01, 2);
SELECT * FROM book;
--------------------------------
SELECT title, amount, 1.65 * amount AS pack
FROM book;
------------
SELECT title, amount, price,
    ROUND(IF(amount < 4, price * 0.5, IF(amount < 11, price * 0.7, price * 0.9)), 2) AS sale,
    IF(amount < 4, 'скидка 50%', IF(amount < 11, 'скидка 30%', 'скидка 10%')) AS Ваша_скидка
FROM book; 
------------------------------
SELECT author, title, 
    ROUND(IF(author='Булгаков М.А.', 1.1*price, IF(author='Есенин С.А.', 1.05*price, price)),2) AS new_price
FROM book;
---------------------------------
SELECT title, author, price, amount
FROM book
WHERE (price < 500 OR price > 600) AND price * amount >= 5000;
-----------------------------------
SELECT title, author
FROM book
WHERE (price BETWEEN 540.50 AND 800) AND amount IN (2, 3, 5, 7);
__________________________________________

SELECT author, title FROM book
WHERE amount BETWEEN 2 AND 14
ORDER BY author DESC, title;

___________________________________

// Вывести названия книг, которые состоят ровно из одного слова, если считать, что слова в названии отделяются друг от друга пробелами

SELECT title FROM book 
WHERE title NOT LIKE "% %";

---------------------------------------------------------
// Вывести названия книг, которые содержат букву "и" как отдельное слово, если считать, что слова в названии отделяются друг от друга пробелами и не содержат знаков препинания.

SELECT title FROM book 
WHERE   title LIKE "_% и _%" /*отбирает слово И внутри названия */
    OR title LIKE "и _%" /*отбирает слово И в начале названия */
    OR title LIKE "_% и" /*отбирает слово И в конце названия */
    OR title LIKE "и" /* отбирает название, состоящее из одного слова И */
_______________________________________

//Вывести книги, название которых длиннее 5 символов:

 SELECT title FROM book 
WHERE title LIKE "______%";
/* эквивалентные условия 
title LIKE "%______"
title LIKE "%______%"
*/
-------------------------------------------------------------

//Вывести название книг, состоящих ровно из 5 букв.

SELECT title FROM book 
WHERE title LIKE "_____"
___________________________________________

//Вывести названия книг, начинающихся с буквы «Б».

SELECT title 
FROM book
WHERE title LIKE 'Б%';
/* эквивалентное условие 
title LIKE 'б%'
*/
______________________________________________
// Вывести название и автора тех книг, название которых состоит из двух и более слов, а инициалы автора содержат букву «С». Считать, что в названии слова отделяются друг от друга пробелами и не содержат знаков препинания, между фамилией автора и инициалами обязателен пробел, инициалы записываются без пробела в формате: буква, точка, буква, точка. Информацию отсортировать по названию книги в алфавитном порядке.

SELECT title, author
FROM book
WHERE title LIKE "%_% %_%" AND author LIKE "%С.%"
ORDER BY title;
__________________________________
уникальные значения

SELECT DISTINCT amount
FROM book;
__________________________________
Посчитать, количество различных книг и количество экземпляров книг каждого автора , хранящихся на складе.  Столбцы назвать Автор, Различных_книг и Количество_экземпляров соответственно.

SELECT author AS Автор, COUNT(amount) AS Различных_книг, SUM(amount) AS Количество_экземпляров
FROM book
GROUP BY author
______________________________________
Вывести фамилию автора, минимальную, максимальную и среднюю цену книг каждого автора . Вычисляемые столбцы назвать Минимальная_цена, Максимальная_цена и Средняя_цена соответственно.

SELECT author, MIN(price) AS Минимальная_цена, MAX(price) AS Максимальная_цена, AVG(price) AS Средняя_цена
FROM book
GROUP BY author;
_______________________________________

Для каждого автора вычислить суммарную стоимость книг S (имя столбца Стоимость), а также вычислить налог на добавленную стоимость  для полученных сумм (имя столбца НДС ) , который включен в стоимость и составляет k = 18%,  а также стоимость книг  (Стоимость_без_НДС) без него. Значения округлить до двух знаков после запятой. В запросе для расчета НДС(tax)  и Стоимости без НДС(S_without_tax) использовать следующие формулы:

SELECT author, SUM(amount*price) AS Стоимость, ROUND(SUM(amount*price)*18/100/(1+18/100),2) AS НДС, ROUND(SUM(amount*price)/(1+18/100),2) AS Стоимость_без_НДС
FROM book
GROUP BY author;
___________________________________________
Найти минимальную и максимальную цену книг всех авторов, общая стоимость книг которых больше 5000.

SELECT author,
    MIN(price) AS Минимальная_цена, 
    MAX(price) AS Максимальная_цена
FROM book
GROUP BY author
HAVING SUM(price * amount) > 5000;
___________________________________________
Вычислить среднюю цену и суммарную стоимость тех книг, количество экземпляров которых принадлежит интервалу от 5 до 14, включительно. Столбцы назвать Средняя_цена и Стоимость, значения округлить до 2-х знаков после запятой.

SELECT ROUND(AVG(price),2) AS Средняя_цена,  ROUND(SUM(price*amount),2) AS Стоимость
FROM book
WHERE (amount BETWEEN 5 AND 14);
______________________________________________

WHERE и HAVING могут использоваться в одном запросе. При этом необходимо учитывать порядок выполнения  SQL запроса на выборку на СЕРВЕРЕ:

FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY
_______________________________________________
Посчитать стоимость всех экземпляров каждого автора без учета книг «Идиот» и «Белая гвардия». В результат включить только тех авторов, у которых суммарная стоимость книг более 5000 руб. Вычисляемый столбец назвать Стоимость. Результат отсортировать по убыванию стоимости.

SELECT author, SUM(amount*price) AS Стоимость
FROM book
WHERE title NOT IN ("Идиот", "Белая гвардия")
GROUP BY author
HAVING SUM(amount*price) > 5000
ORDER BY Стоимость DESC;
__________________________________________________
Вывести информацию (автора, название и цену) о  книгах, цены которых меньше или равны средней цене книг на складе. Информацию вывести в отсортированном по убыванию цены виде. Среднее вычислить как среднее по цене книги.

SELECT author, title, price
FROM book
WHERE price <= (SELECT AVG(price) FROM book)
ORDER BY price DESC;
______________________________________________________
Вывести информацию (автора, название и цену) о тех книгах, цены которых превышают минимальную цену книги на складе не более чем на 150 рублей в отсортированном по возрастанию цены виде.

SELECT author, title, price
FROM book
WHERE (price-(SELECT MIN(price) FROM book)) <= 150
ORDER BY price;
_____________________________________________________

Вывести информацию (автора, книгу и количество) о тех книгах, количество экземпляров которых в таблице book не дублируется.

SELECT author, title, amount
FROM book
WHERE amount IN (
        SELECT amount 
        FROM book 
        GROUP BY amount 
        HAVING COUNT(amount)=1
      );
___________________________________________________________
В этом примере amount < ANY ( 4.0000, 7.6667, 15.0000)  означает, что подходят amount меньше самого большого значения из списка.

SELECT author, title, price
FROM book
WHERE price < ANY (
        SELECT AVG(price) 
        FROM book 
        GROUP BY author 
      );
____________________________________________________________-
Посчитать сколько и каких экземпляров книг нужно заказать поставщикам, чтобы на складе стало одинаковое количество экземпляров каждой книги, равное значению самого большего количества экземпляров одной книги на складе. Вывести название книги, ее автора, текущее количество экземпляров на складе и количество заказываемых экземпляров книг. Последнему столбцу присвоить имя Заказ

SELECT title, author, amount, 
    (SELECT MAX(amount) 
     FROM book)-amount AS Заказ
FROM book
WHERE amount NOT IN (SELECT MAX(amount) FROM book);
_______________________________________________________________
SELECT author, title, price, price*amount AS Выручка,(SELECT MAX(price*amount) FROM book) AS Макс_выручка, (SELECT MAX(price*amount) FROM book)-price*amount AS Потеря_выгоды
FROM book
___________________________________________________________

______________________________________________________________

CREATE TABLE supply(
    supply_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(50),
    author VARCHAR(30),
    price DECIMAL(8, 2),
    amount INT);

________________________________________________________________-
INSERT INTO supply (title, author, price, amount)
VALUES ("Лирика", "Пастернак Б.Л.", 518.99, 2),
        ("Черный человек", "Есенин С.А.", 570.20, 6),
        ("Белая гвардия", "Булгаков М.А.", 540.50, 7),
        ("Идиот", "Достоевский Ф.М.", 360.80, 3);
_____________________________________________________________-__
INSERT INTO book (title, author, price, amount) 
SELECT title, author, price, amount 
FROM supply;

SELECT * FROM book;
______________________________________________________________
Добавить из таблицы supply в таблицу book, все книги, кроме книг, написанных Булгаковым М.А. и Достоевским Ф.М.

INSERT INTO book (title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN ('Булгаков М.А.', 'Достоевский Ф.М.');

SELECT * FROM book;
__________________________________________________________________

Занести из таблицы supply в таблицу book только те книги, авторов которых нет в  book.

INSERT INTO book(title, author, price, amount)
SELECT title, author, price, amount
FROM supply
WHERE author NOT IN (SELECT author FROM book);

SELECT * FROM book;
_________________________________________________________________

Уменьшить на 30% цену книг в таблице book.

UPDATE book 
SET price = 0.7 * price;

SELECT * FROM book;
___________________________________________________________________

Уменьшить на 30% цену тех книг в таблице book, количество которых меньше 5.

UPDATE book 
SET price = 0.7 * price 
WHERE amount < 5;

SELECT * FROM book;

___________________________________________________________________
Уменьшить на 10% цену тех книг в таблице book, количество которых принадлежит интервалу от 5 до 10 включительно.

UPDATE book
SET price = 0.9*price
WHERE amount BETWEEN 5 AND 10;

SELECT * FROM book;
_________________________________________________________________
В таблице book необходимо скорректировать значение для покупателя в столбце buy таким образом, чтобы оно не превышало допустимый остаток в столбце amount. А цену тех книг, которые покупатель не заказывал, снизить на 10%


UPDATE book 
SET buy = IF(buy>amount, amount, buy), price = IF(buy = 0, 0.9*price, price);

SELECT * FROM book;
__________________________________________________________________

Если в таблице supply  есть те же книги, что и в таблице book, добавлять эти книги в таблицу book не имеет смысла. Необходимо увеличить их количество на значение столбца amountтаблицы supply.

UPDATE book, supply 
SET book.amount = book.amount + supply.amount
WHERE book.title = supply.title AND book.author = supply.author;

SELECT * FROM book;
___________________________________________________________________
Для тех книг в таблице book , которые есть в таблице supply, не только увеличить их количество в таблице book ( увеличить их количество на значение столбца amountтаблицы supply), но и пересчитать их цену (для каждой книги найти сумму цен из таблиц book и supply и разделить на 2).

UPDATE book, supply
SET book.amount = book.amount + supply.amount, book.price = (book.price + supply.price)/2
WHERE book.author = supply.author AND book.title = supply.title;

SELECT * FROM book;

_________________________________________________________________________
Удалить из таблицы supply книги тех авторов, общее количество экземпляров книг которых в таблице book превышает 10.

DELETE FROM supply 
WHERE author IN (
    SELECT author
    FROM book
    GROUP BY author
    HAVING SUM(amount) > 10
    );

SELECT * FROM supply;

_________________________________________________________________________
Создать таблицу заказ (ordering), куда включить авторов и названия тех книг, количество экземпляров которых в таблице book меньше среднего количества экземпляров книг в таблице book. В таблицу включить столбец   amount, в котором для всех книг указать одинаковое значение - среднее количество экземпляров книг в таблице book.

CREATE TABLE ordering AS
SELECT author,title, (SELECT ROUND(AVG(amount)) FROM book) AS amount 
FROM book
WHERE amount <(SELECT ROUND(AVG(amount)) FROM book);

SELECT * FROM ordering;
_________________________________________________________________________
Вывести из таблицы trip информацию о командировках тех сотрудников, фамилия которых заканчивается на букву «а», в отсортированном по убыванию даты последнего дня командировки виде. В результат включить столбцы name, city, per_diem, date_first, date_last.

SELECT name, city, per_diem, date_first, date_last
FROM trip
WHERE name LIKE "%а _._."
ORDER BY date_last DESC;

____________________________________________________________________________
Вывести в алфавитном порядке фамилии и инициалы тех сотрудников, которые были в командировке в Москве.

SELECT DISTINCT name 
FROM trip
WHERE city="Москва"
ORDER BY name;
______________________________________________________________________________-
Для каждого города посчитать, сколько раз сотрудники в нем были.  Информацию вывести в отсортированном в алфавитном порядке по названию городов. Вычисляемый столбец назвать Количество.

SELECT city, COUNT(city) AS Количество
FROM trip
GROUP BY city
ORDER BY city;
_______________________________________________________________________________
Вывести два города, в которых чаще всего были в командировках сотрудники. Вычисляемый столбец назвать Количество.

SELECT city, COUNT(city) AS Количество
FROM trip
GROUP BY city
ORDER BY Количество DESC
LIMIT 2;
_________________________________________________________________________________
Вывести информацию о командировках во все города кроме Москвы и Санкт-Петербурга (фамилии и инициалы сотрудников, город ,  длительность командировки в днях, при этом первый и последний день относится к периоду командировки). Последний столбец назвать Длительность. Информацию вывести в упорядоченном по убыванию длительности поездки, а потом по убыванию названий городов (в обратном алфавитном порядке).

SELECT name, city, DATEDIFF(date_last, date_first)+1 AS Длительность
FROM trip
WHERE city NOT IN ('Москва', 'Санкт-Петербург')
ORDER BY Длительность DESC, city DESC; 
_____________________________________________________________________________________
Вывести информацию о командировках сотрудника(ов), которые были самыми короткими по времени. В результат включить столбцы name, city, date_first, date_last.

SELECT name, city, date_first, date_last
FROM trip
WHERE DATEDIFF(date_last, date_first) = (SELECT MIN(DATEDIFF(date_last, date_first)) FROM trip);
_____________________________________________________________________________________
Вывести информацию о командировках, начало и конец которых относятся к одному месяцу (год может быть любой). В результат включить столбцы name, city, date_first, date_last. Строки отсортировать сначала  в алфавитном порядке по названию города, а затем по фамилии сотрудника .

SELECT name, city, date_first, date_last
FROM trip
WHERE MONTH(date_first) = MONTH(date_last)
ORDER BY city, name;
______________________________________________________________________________________
Вывести название месяца и количество командировок для каждого месяца. Считаем, что командировка относится к некоторому месяцу, если она началась в этом месяце. Информацию вывести сначала в отсортированном по убыванию количества, а потом в алфавитном порядке по названию месяца виде. Название столбцов – Месяц и Количество.

SELECT MONTHNAME(date_first) AS Месяц, COUNT(date_first) AS Количество
FROM trip
GROUP BY Месяц
ORDER BY Количество DESC, Месяц;
___________________________________________________________________________________--
Вывести сумму суточных (произведение количества дней командировки и размера суточных) для командировок, первый день которых пришелся на февраль или март 2020 года. Значение суточных для каждой командировки занесено в столбец per_diem. Вывести фамилию и инициалы сотрудника, город, первый день командировки и сумму суточных. Последний столбец назвать Сумма. Информацию отсортировать сначала  в алфавитном порядке по фамилиям сотрудников, а затем по убыванию суммы суточных.

SELECT name, city, date_first, (DATEDIFF(date_last, date_first)+1)*per_diem AS Сумма
FROM trip
WHERE (MONTH(date_first) IN (2, 3)) AND (date_first LIKE "2020%")
ORDER BY name, Сумма DESC;
___________________________________________________________________________________________
Вывести фамилию с инициалами и общую сумму суточных, полученных за все командировки для тех сотрудников, которые были в командировках больше чем 3 раза, в отсортированном по убыванию сумм суточных виде. Последний столбец назвать Сумма.

SELECT name, SUM((DATEDIFF(date_last, date_first)+1)*per_diem) AS Сумма
FROM trip
WHERE name IN (SELECT name FROM trip GROUP BY name HAVING COUNT(name) > 3)
GROUP BY name
ORDER BY Сумма DESC;
____________________________________________________________________________________________


CREATE TABLE fine(
    fine_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(30), 
    number_plate VARCHAR(6),
    violation VARCHAR(50),
    sum_fine DECIMAL(8,2),
    date_violation DATE,
    date_payment DATE);
_____________________________________________________________________________________________
Занести в таблицу fine суммы штрафов, которые должен оплатить водитель, в соответствии с данными из таблицы traffic_violation. При этом суммы заносить только в пустые поля столбца  sum_fine.

UPDATE fine AS f, traffic_violation AS tv
SET f.sum_fine=tv.sum_fine
WHERE f.violation=tv.violation AND f.sum_fine IS NULL;

SELECT * FROM fine;
_____________________________________________________________________________________________
Вывести фамилию, номер машины и нарушение только для тех водителей, которые на одной машине нарушили одно и то же правило   два и более раз. При этом учитывать все нарушения, независимо от того оплачены они или нет. Информацию отсортировать в алфавитном порядке, сначала по фамилии водителя, потом по номеру машины и, наконец, по нарушению.

SELECT name, number_plate, violation
FROM fine
GROUP BY name, number_plate, violation
HAVING COUNT(violation) > 1
ORDER BY name, number_plate, violation;
_________________________________________________________________________________________________
В таблице fine увеличить в два раза сумму неоплаченных штрафов для отобранных на предыдущем шаге записей. 
Для всех нарушений, по которым штраф еще не оплачен, (тех, у которых date_payment имеет пустое значение Null), необходимо проверить, является ли данное нарушение для водителя и машины повторным, если да –  увеличить штраф в два раза.
Если водитель совершил нарушение на другой машине, ему увеличивать штраф не нужно.
Если несколько повторных нарушений не оплачены, то штраф увеличить для всех.


UPDATE fine f, 
    (SELECT name, number_plate, violation
    FROM fine
    GROUP BY name, number_plate, violation
    HAVING COUNT(violation) > 1) q
SET f.sum_fine = f.sum_fine*2
WHERE (f.date_payment IS NULL) AND (f.name=q.name) AND (f.number_plate=q.number_plate) AND (f.violation=q.violation);

SELECT * FROM fine;
______________________________________________________________________________________________________
в таблицу fine занести дату оплаты соответствующего штрафа из таблицы payment; 
уменьшить начисленный штраф в таблице fine в два раза  (только для тех штрафов, информация о которых занесена в таблицу payment) , если оплата произведена не позднее 20 дней со дня нарушения.

UPDATE fine AS f, payment AS q
SET f.date_payment=q.date_payment,
    f.sum_fine = IF(DATEDIFF(f.date_payment, f.date_violation)<=20, f.sum_fine*0.5, f.sum_fine)
WHERE (f.date_payment IS NULL) AND (f.name=q.name) AND (f.number_plate=q.number_plate) AND  (f.date_violation=q.date_violation) AND (f.violation=q.violation);

SELECT name, violation, sum_fine, date_violation,date_payment FROM fine;
_____________________________________________________________________________________________________
Создать новую таблицу back_payment, куда внести информацию о неоплаченных штрафах (Фамилию и инициалы водителя, номер машины, нарушение, сумму штрафа  и  дату нарушения) из таблицы fine.

CREATE TABLE back_payment AS 
    (SELECT name, number_plate,violation, sum_fine, date_violation
     FROM fine
     WHERE date_payment IS NULL);
     
SELECT * FROM back_payment;
______________________________________________________________________________________________________
Удалить из таблицы fine информацию о нарушениях, совершенных раньше 1 февраля 2020 года. 

DELETE FROM fine
WHERE DATEDIFF("2020-02-01",date_violation)>0;

SELECT * FROM fine;
__________________________________________________________________________________________________________



CREATE TABLE book (
    book_id INT PRIMARY KEY AUTO_INCREMENT, 
    title VARCHAR(50), 
    author_id INT NOT NULL, 
    price DECIMAL(8,2), 
    amount INT, 
    FOREIGN KEY (author_id)  REFERENCES author (author_id) 
);
_______________________________________________________________________________________________________-
Вывести название, жанр и цену тех книг, количество которых больше 8, в отсортированном по убыванию цены виде.

SELECT title, name_genre, price
FROM
    book INNER JOIN genre
    ON book.genre_id = genre.genre_id
WHERE amount > 8
ORDER BY price DESC;
______________________________________________________________________________________________________
Вывести название всех книг каждого автора, если книг некоторых авторов в данный момент нет на складе – вместо названия книги указать Null.

SELECT name_author, title 
FROM author LEFT JOIN book
     ON author.author_id = book.author_id
ORDER BY name_author; 
_________________________________________________________________________________________________________--
Вывести все жанры, которые не представлены в книгах на складе

SELECT name_genre
FROM genre LEFT JOIN book
    ON genre.genre_id = book.genre_id
WHERE title IS NULL;   
______________________________________________________________________________________________________
Необходимо в каждом городе провести выставку книг каждого автора в течение 2020 года. Дату проведения выставки выбрать случайным образом. Создать запрос, который выведет город, автора и дату проведения выставки. Последний столбец назвать Дата. Информацию вывести, отсортировав сначала в алфавитном порядке по названиям городов, а потом по убыванию дат проведения выставок

SELECT name_city, name_author, (DATE_ADD('2020-01-01', INTERVAL FLOOR(RAND()*365) DAY)) AS Дата
    FROM author, city
ORDER BY name_city, Дата DESC;
___________________________________________________________________________________________________________
